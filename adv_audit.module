<?php

/**
 * @file
 * Main module file.
 */

use Drupal\Core\Render\Element;

define('ADV_AUDIT_ENABLE_STATUS', 1);

/**
 * Implements hook_theme().
 */
function adv_audit_theme() {
  return [
    'adv_audit' => [
      'render element' => 'elements',
    ],
    'adv_audit_run_process' => [
      'variables' => ['categories' => NULL],
      'template' => 'adv-audit-process-item',
    ],
  ];
}

/**
 * Prepares variables for templates.
 *
 * Default template: adv_audit.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function adv_audit_preprocess_adv_audit(array &$variables) {
  // Helpful $content variable for templates.
  $variables += ['content' => []];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  $variables['adv_audit'] = $variables['elements']['#adv_audit'];
}


function _adv_audit_batch_run_finished($success, array $results, array $operations) {

}

/**
 * Batch operation: runs a single check.
 *
 * @param array $check
 *   The check to run.
 * @param array $context
 *   The Batch context.
 */
function _adv_audit_batch_run_op($checkItem, array &$context) {
  $i = 0;
  // Inform the user about the progress.
  $context['message'] = $checkItem['info']['label'];
  $results[$checkItem['info']['category']][] = '';

  // Store the results.
  $context['results'] = array_merge($context['results'], $results);

}
