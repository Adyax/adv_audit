<?php

/**
 * @file
 * Main module file.
 */

use Drupal\Core\Render\Element;
use Drupal\adv_audit\Plugin\AdvAuditCheckpointInterface;
use Drupal\adv_audit\Renderer\ToJson;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url;
use Drupal\Core\Datetime\DrupalDateTime;

/**
 * Implements hook_theme().
 */
function adv_audit_theme() {
  return [
    'adv_audit' => [
      'render element' => 'elements',
    ],
    'adv_audit_run_process' => [
      'variables' => ['categories' => NULL],
      'template' => 'adv-audit-process-item',
    ],
    'adv_audit_html_results' => [
      'variables' => ['category' => NULL, 'reports' => NULL],
      'template' => 'adv-audit-html-results',
    ],
  ];
}

/**
 * Prepares variables for templates.
 *
 * Default template: adv_audit.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the user information and any
 *   - attributes: HTML attributes for the containing element.
 */
function adv_audit_preprocess_adv_audit(array &$variables) {
  // Helpful $content variable for templates.
  $variables += ['content' => []];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

}

/**
 * Complete a batch process.
 *
 * Callback for batch_set().
 */
function _adv_audit_batch_run_finished($success, array $results, array $operations) {
  $out = '';
  $dt = new DrupalDateTime();
  $reports_data = [];

  foreach ($results as $category => $reports) {
    if ($category == 'project_name' && !is_array($reports)) {
      $project_name = $reports;
    }
    else {
      $reports_data[] = ['category' => $category, 'reports' => $reports];
    }
  }

  $renderer = new ToJson($reports_data);
  $out .= $renderer->render(TRUE);
  $entity_storage = \Drupal::entityTypeManager()->getStorage('adv_audit');
  $adv_audit_entity = $entity_storage->create();
  $adv_audit_entity->title->value = $project_name . ' - ' . $dt->format('Y-m-d H:i:s');
  $adv_audit_entity->audit_results->value = $out;
  $adv_audit_entity->save();
  // Redirect to created audit results.
  $response = new RedirectResponse(Url::fromRoute('entity.adv_audit.canonical',
    ['adv_audit' => $adv_audit_entity->id()])->toString());
  $response->send();
}

/**
 * Batch operation: runs a single check.
 *
 * @param \Drupal\adv_audit\Plugin\AdvAuditCheckpointInterface $plugin
 *   The check to run.
 * @param array $context
 *   The Batch context.
 */
function _adv_audit_batch_run_op(AdvAuditCheckpointInterface $plugin, array &$context) {
  // Inform the user about the progress.
  $context['message'] = $plugin->getTitle();
  $results = $plugin->process();

  // Store the results.
  $context['results'] = array_merge_recursive($context['results'], $results);
}

/**
 * Last batch operation: we need to sent to results the project name.
 *
 * @param string $project_name
 *   The project name.
 * @param array $context
 *   The Batch context.
 */
function _adv_audit_batch_run_op_last($project_name, array &$context) {
  // Store the results.
  $context['results']['project_name'] = $project_name;
}
